package ui;

import entity.FoodDTO;
import entity.OwnerDTO;
import entity.StoreDTO;
import food.FoodController;
import food.FoodRepository;
import food.FoodService;
import owner.OwnerController;
import owner.OwnerRepository;
import owner.OwnerService;
import store.StoreController;
import store.StoreRepository;
import store.StoreService;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class FoodUI {
    static Scanner input = new Scanner(System.in);
    static OwnerController o_controller = new OwnerController(new OwnerService(new OwnerRepository()));
    static StoreController s_controller = new StoreController(new StoreService(new StoreRepository()));
    static FoodController food_controller = new FoodController(new FoodService(new FoodRepository()));

    public static void f_foodMenu(OwnerDTO ownerDTO) {
        o_controller = new OwnerController(new OwnerService(new OwnerRepository()));
        s_controller = new StoreController(new StoreService(new StoreRepository()));
        food_controller = new FoodController(new FoodService(new FoodRepository()));

        while (true) {
            try {
                menu();
                int select = Integer.parseInt(input.nextLine());
                switch (select) {
                    case 1 -> {
                        f_createFood(ownerDTO);
                    }
                    case 2 -> {
                        f_updateFood(ownerDTO);
                    }
                    case 3 -> {
                        selectFood(ownerDTO);
                    }
                    case 4 -> {
                        f_deleteFood(ownerDTO);
                    }
                    case 9 -> {
                        return;
                    }
                }
            } catch (NumberFormatException e) {
                System.out.println("\n*****üòÖÏûòÎ™ªÎêú ÏûÖÎ†•ÏûÖÎãàÎã§. Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!*****\n");
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("\n*****üòÖÏò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.*****\n");
            }
        }
    }

    private static void menu() {
        System.out.println("\n-------------------------------------------------------");
        System.out.println("1.ÏùåÏãù Îì±Î°ù | 2.ÏùåÏãù ÏàòÏ†ï | 3.ÏùåÏãù Ï°∞Ìöå | 4.ÏùåÏãù ÏÇ≠Ï†ú | 9.Ïù¥Ï†ÑÎ©îÎâ¥");
        System.out.println("-------------------------------------------------------");
        System.out.print("üëÄÎ¨¥ÏóáÏùÑ ÌïòÏãúÍ≤†Ïñ¥Ïöî?>> ");
    }

    //ÏùåÏãùÎì±Î°ù
    public static int f_createFood(OwnerDTO ownerDTO) {
        FoodDTO foodDTO = StoreUI.f_searchStore(ownerDTO);
        System.out.print("üçéÏùåÏãù Î™ÖÏù¥ Î¨¥ÏóáÏù∏Í∞ÄÏöî? >> ");
        String name = input.nextLine();

        System.out.print("üíµÍ∞ÄÍ≤©ÏùÑ ÏñºÎßàÏù∏Í∞ÄÏöî? >> ");
        int price = Integer.parseInt(input.nextLine());

        System.out.print("‚è±Ô∏èÏµúÎåÄ Ï°∞Î¶¨ÏãúÍ∞ÑÏùÄ ÏñºÎßàÎÇò ÎêòÎÇòÏöî? >> ");
        int maxCookingTime = Integer.parseInt(input.nextLine());

        foodDTO.setName(name);
        foodDTO.setPrice(price);
        foodDTO.setMaxCookingTime(maxCookingTime);

        int result = food_controller.foodJoin(foodDTO);
        return result;
    }

    public static void f_deleteFood(OwnerDTO ownerDTO) {
        FoodDTO foodDTO = selectStoreFood(ownerDTO);
        food_controller.deleteFood(foodDTO.getFoodId());
    }

    public static int f_updateFood(OwnerDTO ownerDTO) {
        FoodDTO foodDTO = updateFood(ownerDTO);
        int result = food_controller.updateFood(foodDTO);
        System.out.println(result + "Í±¥Ïù¥ ÏóÖÎç∞Ïù¥Ìä∏ ÎêòÏóàÏäµÎãàÎã§.");
        return result;
    }

    //foodDTO ÏàòÏ†ï
    public static FoodDTO updateFood(OwnerDTO ownerDTO) {
        FoodDTO foodDTO = selectStoreFood(ownerDTO);

        System.out.println("\n----------------------------------------");
        System.out.print("üç∞‚ÄçÎ≥ÄÍ≤ΩÎêú ÏùåÏãùÎ™Ö >> ");
        foodDTO.setName(input.nextLine());

        System.out.println("\n----------------------------------------");
        System.out.print("üíµ‚ÄçÎ≥ÄÍ≤ΩÎêú Í∞ÄÍ≤© >> ");
        foodDTO.setPrice(Integer.parseInt(input.nextLine()));

        System.out.println("\n----------------------------------------");
        System.out.print("‚è±Ô∏èÎ≥ÄÍ≤ΩÎêú Ï°∞Î¶¨ÏãúÍ∞Ñ >> ");
        foodDTO.setMaxCookingTime(Integer.parseInt(input.nextLine()));

        return foodDTO;
    }

    public static List<FoodDTO> selectFood(OwnerDTO ownerDTO) {
        System.out.println("----------------------------------------");
        List<StoreDTO> storeList = StoreUI.displayStores(ownerDTO);
        System.out.print("\nüíÅ‚ÄçÏñ¥Îäê Îß§Ïû•ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî(Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî) >> ");
        int selectStore = Integer.parseInt(input.nextLine());
        List<FoodDTO> foodList = displayFoods(storeList, selectStore);
        return foodList;
    }

    public static FoodDTO selectStoreFood(OwnerDTO ownerDTO) {
        System.out.println("----------------------------------------");
        List<StoreDTO> storeList = StoreUI.displayStores(ownerDTO);
        System.out.print("\nüíÅ‚ÄçÎß§Ïû•ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî(Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî) >> ");
        int selectStore = Integer.parseInt(input.nextLine());
        List<FoodDTO> foodList = displayFoods(storeList, selectStore);

        System.out.println("----------------------------------------");
        System.out.print("\nüíÅ‚ÄçÏùåÏãùÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî(Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî) >> ");
        int selectFood = Integer.parseInt(input.nextLine());
        FoodDTO foodDTO = new FoodDTO();
        for (FoodDTO food : foodList) {
            if (food.getStoreId() == selectFood) {
                foodDTO = food;
            }
        }
        foodDTO.setFoodId(selectFood);
        foodDTO.setStoreId(selectStore);
        return foodDTO;
    }

    //Îß§Ïû•Ïùò ÏùåÏãù ÎÇòÏó¥ÌïòÍ∏∞
    public static List<FoodDTO> displayFoods(List<StoreDTO> storeList, int selectStore) {
        List<FoodDTO> foodList = new ArrayList<>();
        for (StoreDTO storeDTO : storeList) {
            if (storeDTO.getId() == selectStore) {
                foodList = food_controller.selectByStoreId(storeDTO.getId());
                System.out.println(String.format("%-10s %-20s %-20s %-20s", "ÏùåÏãùÎ≤àÌò∏", "ÏùåÏãùÏù¥Î¶Ñ", "Í∞ÄÍ≤©", "ÏµúÎåÄÏ°∞Î¶¨ÏãúÍ∞Ñ"));
                for (FoodDTO food : foodList) {
                    System.out.println(String.format("%-10d %-20s %-20s %-20s",
                            food.getFoodId(), food.getName(), food.getPrice(), food.getMaxCookingTime()));
                }
            }
        }
        return foodList;
    }
}
